# -*- coding: utf-8 -*-
"""indeedscrapeclean.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DwKCXsTKMzQsuV365k0la8yn2OpjXH00
"""

from google.colab import files

uploaded = files.upload()

import pandas as pd
import os

# Iterate through each file
for filename in uploaded.keys():
    try:
        # Read the CSV file into a DataFrame
        df = pd.read_csv(filename)

        # Check the imported columns
        print(f"Columns in {filename}: {', '.join(df.columns)}")

        # Convert column names to lowercase for case-insensitive matching
        lowercase_columns = [column.lower() for column in df.columns]

        # Check if the expected columns exist in the DataFrame
        expected_columns = ['job_title_name', 'job_title_jobtype', 'job_title_description']
        if not all(expected.lower() in lowercase_columns for expected in expected_columns):
            print(f"Skipping {filename} due to missing columns.")
            continue

        # Remove rows with "new" in Job_title_name
        df = df[~(df['job_title_name'] == 'new')]

        # Remove rows with Job_title_description under 100 characters
        df = df[~(df['job_title_description'].str.len() < 100)]

        # Save the cleaned DataFrame to a new CSV file
        cleaned_filename = f"cleaned_{filename}"
        df.to_csv(cleaned_filename, index=False)

        print(f"Processed {filename} successfully.")

    except Exception as e:
        print(f"Error processing {filename}: {str(e)}")

# List the files in the current directory
!ls

# Provide the filename of the cleaned file you want to view
cleaned_filename = "cleaned_businessanalyst1.csv"

# Read the cleaned CSV file into a DataFrame
df_cleaned = pd.read_csv(cleaned_filename)

# Display the first few rows of the cleaned DataFrame
df_cleaned.head()

# Create an empty DataFrame to store the merged data
merged_df = pd.DataFrame()

# Iterate through each file
for filename in os.listdir():
    if filename.startswith("cleaned_") and filename.endswith(".csv"):
        # Read the cleaned CSV file into a DataFrame
        df_cleaned = pd.read_csv(filename)

        # Concatenate the current DataFrame with the merged DataFrame
        merged_df = pd.concat([merged_df, df_cleaned], ignore_index=True)

# Save the merged DataFrame to a new CSV file
merged_filename = "merged_cleaned_files.csv"
merged_df.to_csv(merged_filename, index=False)

print(f"Merged cleaned files saved as {merged_filename}.")

!ls

#creating search_term column
# Create an empty DataFrame to store the merged data
merged_df = pd.DataFrame()

# Iterate through each file
for filename in os.listdir():
    if filename.startswith("cleaned_") and filename.endswith(".csv"):
        # Read the cleaned CSV file into a DataFrame
        df_cleaned = pd.read_csv(filename)

        # Extract the search term from the filename
        search_term = filename.split("_")[1].split(".")[0]

        # Add a new column 'search_term' with the extracted search term
        df_cleaned['search_term'] = search_term

        # Concatenate the current DataFrame with the merged DataFrame
        merged_df = pd.concat([merged_df, df_cleaned], ignore_index=True)

# Save the merged DataFrame to a new CSV file
merged_filename = "merged_cleaned_files.csv"
merged_df.to_csv(merged_filename, index=False)

print(f"Merged cleaned files saved as {merged_filename}.")

#changing search term for each file name to specified search term
# Create an empty DataFrame to store the merged data
merged_df = pd.DataFrame()

# Iterate through each file
for filename in os.listdir():
    if filename.startswith("cleaned_") and filename.endswith(".csv"):
        # Read the cleaned CSV file into a DataFrame
        df_cleaned = pd.read_csv(filename)

        # Extract the original search term from the filename
        original_search_term = filename.split("_")[1].split(".")[0]

        # Modify the search term
        modified_search_term = original_search_term.replace("analyst", "analyst_").replace("1", "").replace("2", "").replace("3", "")
        modified_search_term = modified_search_term.replace("_", " ")

        # Add a new column 'search_term' with the modified search term
        df_cleaned['search_term'] = modified_search_term

        # Concatenate the current DataFrame with the merged DataFrame
        merged_df = pd.concat([merged_df, df_cleaned], ignore_index=True)

# Save the merged DataFrame to a new CSV file
merged_filename = "merged_cleaned_files.csv"
merged_df.to_csv(merged_filename, index=False)

print(f"Merged cleaned files saved as {merged_filename}.")

# Specify the path of the merged CSV file
merged_filename = "merged_cleaned_files.csv"

# Download the file to your local computer
files.download(merged_filename)